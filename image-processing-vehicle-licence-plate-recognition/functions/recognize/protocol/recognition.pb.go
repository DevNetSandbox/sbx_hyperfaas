// Code generated by protoc-gen-go. DO NOT EDIT.
// source: recognition.proto

/*
Package recognition is a generated protocol buffer package.

It is generated from these files:
	recognition.proto

It has these top-level messages:
	RecognitionRequest
	RecognitionResponse
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RecognitionRequest struct {
	RequestID string `protobuf:"bytes,1,opt,name=requestID" json:"requestID,omitempty"`
	Image     []byte `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (m *RecognitionRequest) Reset()                    { *m = RecognitionRequest{} }
func (m *RecognitionRequest) String() string            { return proto.CompactTextString(m) }
func (*RecognitionRequest) ProtoMessage()               {}
func (*RecognitionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RecognitionRequest) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *RecognitionRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

type RecognitionResponse struct {
	Recognized bool    `protobuf:"varint,1,opt,name=recognized" json:"recognized,omitempty"`
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence" json:"confidence,omitempty"`
	Plate      string  `protobuf:"bytes,3,opt,name=plate" json:"plate,omitempty"`
}

func (m *RecognitionResponse) Reset()                    { *m = RecognitionResponse{} }
func (m *RecognitionResponse) String() string            { return proto.CompactTextString(m) }
func (*RecognitionResponse) ProtoMessage()               {}
func (*RecognitionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RecognitionResponse) GetRecognized() bool {
	if m != nil {
		return m.Recognized
	}
	return false
}

func (m *RecognitionResponse) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *RecognitionResponse) GetPlate() string {
	if m != nil {
		return m.Plate
	}
	return ""
}

func init() {
	proto.RegisterType((*RecognitionRequest)(nil), "recognition.RecognitionRequest")
	proto.RegisterType((*RecognitionResponse)(nil), "recognition.RecognitionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Recognizer service

type RecognizerClient interface {
	RecognizeImage(ctx context.Context, in *RecognitionRequest, opts ...grpc.CallOption) (*RecognitionResponse, error)
}

type recognizerClient struct {
	cc *grpc.ClientConn
}

func NewRecognizerClient(cc *grpc.ClientConn) RecognizerClient {
	return &recognizerClient{cc}
}

func (c *recognizerClient) RecognizeImage(ctx context.Context, in *RecognitionRequest, opts ...grpc.CallOption) (*RecognitionResponse, error) {
	out := new(RecognitionResponse)
	err := grpc.Invoke(ctx, "/recognition.Recognizer/RecognizeImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Recognizer service

type RecognizerServer interface {
	RecognizeImage(context.Context, *RecognitionRequest) (*RecognitionResponse, error)
}

func RegisterRecognizerServer(s *grpc.Server, srv RecognizerServer) {
	s.RegisterService(&_Recognizer_serviceDesc, srv)
}

func _Recognizer_RecognizeImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecognizerServer).RecognizeImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recognition.Recognizer/RecognizeImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecognizerServer).RecognizeImage(ctx, req.(*RecognitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recognizer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recognition.Recognizer",
	HandlerType: (*RecognizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecognizeImage",
			Handler:    _Recognizer_RecognizeImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recognition.proto",
}

func init() { proto.RegisterFile("recognition.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x4a, 0x4d, 0xce,
	0x4f, 0xcf, 0xcb, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x52, 0xf2, 0xe0, 0x12, 0x0a, 0x42, 0x70, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0x64, 0xb8, 0x38, 0x8b, 0x20, 0x4c, 0x4f, 0x17, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x84,
	0x80, 0x90, 0x08, 0x17, 0x6b, 0x66, 0x6e, 0x62, 0x7a, 0xaa, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x4f,
	0x10, 0x84, 0xa3, 0x94, 0xcd, 0x25, 0x8c, 0x62, 0x52, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90,
	0x1c, 0x17, 0x17, 0xd4, 0xbe, 0xaa, 0xd4, 0x14, 0xb0, 0x59, 0x1c, 0x41, 0x48, 0x22, 0x20, 0xf9,
	0xe4, 0xfc, 0xbc, 0xb4, 0xcc, 0x94, 0xd4, 0xbc, 0x64, 0x88, 0x89, 0x4c, 0x41, 0x48, 0x22, 0x20,
	0xcb, 0x0a, 0x72, 0x12, 0x4b, 0x52, 0x25, 0x98, 0xc1, 0xce, 0x80, 0x70, 0x8c, 0x92, 0xb9, 0xb8,
	0x82, 0x60, 0x66, 0x14, 0x09, 0x85, 0x72, 0xf1, 0xc1, 0x79, 0x9e, 0x20, 0xc7, 0x08, 0xc9, 0xeb,
	0x21, 0xfb, 0x1b, 0xd3, 0x87, 0x52, 0x0a, 0xb8, 0x15, 0x40, 0x1c, 0xae, 0xc4, 0x90, 0xc4, 0x06,
	0x0e, 0x2f, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x83, 0x8e, 0xd0, 0x63, 0x44, 0x01, 0x00,
	0x00,
}
